openapi: 3.0.0
info:
  title: Book Management API
  description: "API for managing books, users, and notes."
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: SwaggerHub API Auto Mocking
paths:
  /books:
    get:
      summary: Get all books
      responses:
        "200":
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "201":
          description: Book created
  /books/{id}:
    get:
      summary: Get a book by ID
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: A book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "404":
          description: Book not found
    put:
      summary: Update a book by ID
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          description: Book updated
        "404":
          description: Book not found
    delete:
      summary: Delete a book by ID
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "204":
          description: Book deleted
        "404":
          description: Book not found
  /users:
    get:
      summary: Get all users
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User created
  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: User updated
        "404":
          description: User not found
    delete:
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "204":
          description: User deleted
        "404":
          description: User not found
  /books/{bookId}/notes:
    get:
      summary: Get notes for a book
      parameters:
        - name: bookId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: A list of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
    post:
      summary: Create a note for a book
      parameters:
        - name: bookId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        "201":
          description: Note created
  /notes/{id}:
    get:
      summary: Get a note by ID
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: A note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        "404":
          description: Note not found
    put:
      summary: Update a note by ID
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        "200":
          description: Note updated
        "404":
          description: Note not found
    delete:
      summary: Delete a note by ID
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "204":
          description: Note deleted
        "404":
          description: Note not found
  /users/{userId}/books:
    get:
      summary: Get books for a user
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: A list of user's books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserBook'
    post:
      summary: Add a book to a user
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBook'
        required: true
      responses:
        "201":
          description: User book added
  /users/{userId}/books/{bookId}:
    put:
      summary: Update a user's book
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: bookId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBook'
        required: true
      responses:
        "200":
          description: User book updated
    delete:
      summary: Delete a user's book
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: bookId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "204":
          description: User book deleted
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Note:
      type: object
      properties:
        id:
          type: integer
        created_at:
          type: string
          format: date-time
        note:
          type: string
        timestamp:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        book_id:
          type: integer
        user_id:
          type: integer
    UserBook:
      type: object
      properties:
        id:
          type: integer
        bookmark:
          type: boolean
        created_at:
          type: string
          format: date-time
        rating:
          type: integer
        updated_at:
          type: string
          format: date-time
        book_id:
          type: integer
        user_id:
          type: integer
