package org.example.booknote.mock;

import org.example.booknote.book.domain.Book;
import org.example.booknote.book.service.port.BookRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeBookRepository implements BookRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Book> books = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Book save(Book book) {
        if (book.getId() == null||book.getId() == 0) {
           Book newBook=Book.builder()
                   .id(autoGeneratedId.incrementAndGet())
                   .title(book.getTitle())
                   .author(book.getAuthor())
                   .createAt(book.getCreateAt())
                   .updateAt(book.getUpdateAt())
                   .build();
            books.add(newBook);
           return newBook;
        }

        books.removeIf(item -> Objects.equals(book.getId(), item.getId()));
        books.add(book);
        return book;
    }

    @Override
    public Optional<Book> findById(Long id) {
        return books.stream().filter(book -> book.getId().equals(id)).findAny();
    }

    @Override
    public void deleteById(Long id) {
        books.removeIf(book -> Objects.equals(book.getId(), id));
    }
}
